What happens when you initialize a repository? Why do you need to do it?
It helps to track all the information and history about files.
It will allow us use git commands.

git init


git status

git add

git reset

How is the staging area different from the working directory and the repository? What value do you think it offers?
I guess it is sanety check just to make sure that user wants to save those particular files and versions.

Reverse git checkout commit id to original:
git checkout master

Compare a file that is in working directory to the same file in staging area(if present):
git diff (no args)

Compare a file that is in staging area to the most recent commit in repositrory:
git diff --staged

Resets all the files in working repo and staging area to the enetial state. !!! Can not be reversed:
git reset --hard

How can you use the staging area to make sure you have one commit per logical change?
Stage only file or files that have linked changes.

Command that showes current branch:
git branch

Command that creates new branch:
git branch newidillia:

Switch to the desired branch:
git checkout newidillia

What are some situations when branches would be helpful in keeping your history organized? How would branches help?
I'm not sure about ornanized the history but it help with creating sevral experimental versions and allow to try diffrent things.

Visual representation of the commit history:
git log --graph --oneline master coins 

How do the diagrams help you visualize the branch structure?
The diagram is very helpful in understanding how branches connects to each other and how commits without branches is unreachable.

The shortcut for git branch newidillia git checkout newidillia:
git checkout -b newidillia

??????Detached head - commit doesn't assing to branch?????

After merging two branches this will allow to see the orinigal branch by using commit id. More info:
git branch --contains <commit_id>
https://www.kernel.org/pub/software/scm/git/docs/git-branch.html
http://stackoverflow.com/questions/1419623/how-to-list-branches-that-contain-a-given-commit

To merge two branches we need first to checkout the main branch (master) that we want to keep:
git checkout mainbranch

Merging coin branch into master branch. We can exclude master because we checked it out. We also can add many branches:
git merge master coins

Using one commitID show compereson with the parent of commitID:
git show commitID

Delet lable with name coins. We can still access to commits in master branch:
git branch -d coins 

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros unique changes automaticly - saves time, conflict codes can't be resolved by git - not smart enought to know which code is correct. Add and deletion is easy - no need for user to waist time. When there is a conflict git asks user to resolvit. Which is important because user can make better decision on end result by looking at conflict.















Merge conflict info:
Merge conflict

If you get a message like this

Auto-merging game.js
CONFLICT (content): Merge conflict in game.js
Automatic merge failed; fix conflicts and then commit the result.
then your files were not in the same state as Caroline's when you started the merge. To fix this, complete the following steps:

Restore your files to their state before you started the merge by running git merge --abort
Double check the state of your files. If you run git log while the master branch is checked out, you should see Caroline's "Add color" commit as the second-most-recent, and the most recent should be your commit fixing the bullet bug. If you use git diff to compare your commit to Caroline's, your commit should introduce the line this.delayBeforeBullet = 10; on line 424. The line should be indented to the same level as the line below it using only spaces (no tabs), and the line should have no spaces after it.
Once your file is in the correct state, create a new commit with your changes.
Try the merge again.
Merge conflict (Newline characters between Windows and Unix systems)

Context: Whenever we hit the "Enter" key on the keyboard, we are actually telling the computer to insert an invisible character into our text file to indicate to the computer that there should be a new line. Unix systems adds one character called the "line feed" character or LF or \n while Windows systems adds two characters, "carriage return" and "line feed" or CRLF or \r\n.

Caroline's files have LF because her files were edited on Mac OSX, which uses LF. If a Windows user were to edit Caroline's files, the Windows text editor might convert all LF to CRLF to make editing files possible. When the Windows user merges her file with Caroline's files, a merge conflict will result due to the different LF and CRLF characters.

To fix this, Windows users should set the global autocrlf attribute to true: git config --global core.autocrlf true. More information can be found here: https://help.github.com/articles/dealing-with-line-endings/#platform-all







